// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StrategyAdded extends ethereum.Event {
  get params(): StrategyAdded__Params {
    return new StrategyAdded__Params(this);
  }
}

export class StrategyAdded__Params {
  _event: StrategyAdded;

  constructor(event: StrategyAdded) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get debtLimit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rateLimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get performanceFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StrategyReported extends ethereum.Event {
  get params(): StrategyReported__Params {
    return new StrategyReported__Params(this);
  }
}

export class StrategyReported__Params {
  _event: StrategyReported;

  constructor(event: StrategyReported) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gain(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get loss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalGain(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalLoss(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalDebt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get debtAdded(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get debtLimit(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Vault__strategiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  apiVersion(): string {
    let result = super.call("apiVersion", "apiVersion():(string)", []);

    return result[0].toString();
  }

  try_apiVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("apiVersion", "apiVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(_spender: Address, _value: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    _spender: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decreaseAllowance(_spender: Address, _value: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    _spender: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  permit(
    owner: Address,
    spender: Address,
    amount: BigInt,
    expiry: BigInt,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "permit",
      "permit(address,address,uint256,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBoolean();
  }

  try_permit(
    owner: Address,
    spender: Address,
    amount: BigInt,
    expiry: BigInt,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "permit",
      "permit(address,address,uint256,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceSheetOfStrategy(_strategy: Address): BigInt {
    let result = super.call(
      "balanceSheetOfStrategy",
      "balanceSheetOfStrategy(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );

    return result[0].toBigInt();
  }

  try_balanceSheetOfStrategy(_strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceSheetOfStrategy",
      "balanceSheetOfStrategy(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBalanceSheet(_strategies: Array<Address>): BigInt {
    let result = super.call(
      "totalBalanceSheet",
      "totalBalanceSheet(address[40]):(uint256)",
      [ethereum.Value.fromAddressArray(_strategies)]
    );

    return result[0].toBigInt();
  }

  try_totalBalanceSheet(
    _strategies: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalanceSheet",
      "totalBalanceSheet(address[40]):(uint256)",
      [ethereum.Value.fromAddressArray(_strategies)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(): BigInt {
    let result = super.call("deposit", "deposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit1(_amount: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_deposit1(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit2(_amount: BigInt, _recipient: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount),
      ethereum.Value.fromAddress(_recipient)
    ]);

    return result[0].toBigInt();
  }

  try_deposit2(
    _amount: BigInt,
    _recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxAvailableShares(): BigInt {
    let result = super.call(
      "maxAvailableShares",
      "maxAvailableShares():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxAvailableShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxAvailableShares",
      "maxAvailableShares():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(): BigInt {
    let result = super.call("withdraw", "withdraw():(uint256)", []);

    return result[0].toBigInt();
  }

  try_withdraw(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw1(_shares: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw1(_shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw2(_shares: BigInt, _recipient: Address): BigInt {
    let result = super.call("withdraw", "withdraw(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares),
      ethereum.Value.fromAddress(_recipient)
    ]);

    return result[0].toBigInt();
  }

  try_withdraw2(
    _shares: BigInt,
    _recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromAddress(_recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pricePerShare(): BigInt {
    let result = super.call("pricePerShare", "pricePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pricePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtOutstanding(): BigInt {
    let result = super.call(
      "debtOutstanding",
      "debtOutstanding():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_debtOutstanding(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtOutstanding",
      "debtOutstanding():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtOutstanding1(_strategy: Address): BigInt {
    let result = super.call(
      "debtOutstanding",
      "debtOutstanding(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );

    return result[0].toBigInt();
  }

  try_debtOutstanding1(_strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "debtOutstanding",
      "debtOutstanding(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditAvailable(): BigInt {
    let result = super.call(
      "creditAvailable",
      "creditAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_creditAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creditAvailable",
      "creditAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditAvailable1(_strategy: Address): BigInt {
    let result = super.call(
      "creditAvailable",
      "creditAvailable(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );

    return result[0].toBigInt();
  }

  try_creditAvailable1(_strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creditAvailable",
      "creditAvailable(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableDepositLimit(): BigInt {
    let result = super.call(
      "availableDepositLimit",
      "availableDepositLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableDepositLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableDepositLimit",
      "availableDepositLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expectedReturn(): BigInt {
    let result = super.call("expectedReturn", "expectedReturn():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expectedReturn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expectedReturn",
      "expectedReturn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expectedReturn1(_strategy: Address): BigInt {
    let result = super.call(
      "expectedReturn",
      "expectedReturn(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );

    return result[0].toBigInt();
  }

  try_expectedReturn1(_strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expectedReturn",
      "expectedReturn(address):(uint256)",
      [ethereum.Value.fromAddress(_strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  report(_gain: BigInt, _loss: BigInt, _debtPayment: BigInt): BigInt {
    let result = super.call(
      "report",
      "report(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gain),
        ethereum.Value.fromUnsignedBigInt(_loss),
        ethereum.Value.fromUnsignedBigInt(_debtPayment)
      ]
    );

    return result[0].toBigInt();
  }

  try_report(
    _gain: BigInt,
    _loss: BigInt,
    _debtPayment: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "report",
      "report(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_gain),
        ethereum.Value.fromUnsignedBigInt(_loss),
        ethereum.Value.fromUnsignedBigInt(_debtPayment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(arg0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(arg0: Address, arg1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(arg0: Address, arg1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(arg0), ethereum.Value.fromAddress(arg1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guardian(): Address {
    let result = super.call("guardian", "guardian():(address)", []);

    return result[0].toAddress();
  }

  try_guardian(): ethereum.CallResult<Address> {
    let result = super.tryCall("guardian", "guardian():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  guestList(): Address {
    let result = super.call("guestList", "guestList():(address)", []);

    return result[0].toAddress();
  }

  try_guestList(): ethereum.CallResult<Address> {
    let result = super.tryCall("guestList", "guestList():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategies(arg0: Address): Vault__strategiesResult {
    let result = super.call(
      "strategies",
      "strategies(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );

    return new Vault__strategiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_strategies(arg0: Address): ethereum.CallResult<Vault__strategiesResult> {
    let result = super.tryCall(
      "strategies",
      "strategies(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__strategiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  withdrawalQueue(arg0: BigInt): Address {
    let result = super.call(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );

    return result[0].toAddress();
  }

  try_withdrawalQueue(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalQueue",
      "withdrawalQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  emergencyShutdown(): boolean {
    let result = super.call(
      "emergencyShutdown",
      "emergencyShutdown():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_emergencyShutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "emergencyShutdown",
      "emergencyShutdown():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositLimit(): BigInt {
    let result = super.call("depositLimit", "depositLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositLimit", "depositLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtLimit(): BigInt {
    let result = super.call("debtLimit", "debtLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtLimit", "debtLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastReport(): BigInt {
    let result = super.call("lastReport", "lastReport():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastReport(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastReport", "lastReport():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activation(): BigInt {
    let result = super.call("activation", "activation():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("activation", "activation():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(): Address {
    let result = super.call("rewards", "rewards():(address)", []);

    return result[0].toAddress();
  }

  try_rewards(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewards", "rewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managementFee(): BigInt {
    let result = super.call("managementFee", "managementFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managementFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managementFee",
      "managementFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceFee(): BigInt {
    let result = super.call("performanceFee", "performanceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceFee",
      "performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonces(arg0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(arg0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _guardian(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetSymbolCall extends ethereum.Call {
  get inputs(): SetSymbolCall__Inputs {
    return new SetSymbolCall__Inputs(this);
  }

  get outputs(): SetSymbolCall__Outputs {
    return new SetSymbolCall__Outputs(this);
  }
}

export class SetSymbolCall__Inputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }

  get _symbol(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSymbolCall__Outputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall extends ethereum.Call {
  get inputs(): AcceptGovernanceCall__Inputs {
    return new AcceptGovernanceCall__Inputs(this);
  }

  get outputs(): AcceptGovernanceCall__Outputs {
    return new AcceptGovernanceCall__Outputs(this);
  }
}

export class AcceptGovernanceCall__Inputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class AcceptGovernanceCall__Outputs {
  _call: AcceptGovernanceCall;

  constructor(call: AcceptGovernanceCall) {
    this._call = call;
  }
}

export class SetGuestListCall extends ethereum.Call {
  get inputs(): SetGuestListCall__Inputs {
    return new SetGuestListCall__Inputs(this);
  }

  get outputs(): SetGuestListCall__Outputs {
    return new SetGuestListCall__Outputs(this);
  }
}

export class SetGuestListCall__Inputs {
  _call: SetGuestListCall;

  constructor(call: SetGuestListCall) {
    this._call = call;
  }

  get _guestList(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuestListCall__Outputs {
  _call: SetGuestListCall;

  constructor(call: SetGuestListCall) {
    this._call = call;
  }
}

export class SetRewardsCall extends ethereum.Call {
  get inputs(): SetRewardsCall__Inputs {
    return new SetRewardsCall__Inputs(this);
  }

  get outputs(): SetRewardsCall__Outputs {
    return new SetRewardsCall__Outputs(this);
  }
}

export class SetRewardsCall__Inputs {
  _call: SetRewardsCall;

  constructor(call: SetRewardsCall) {
    this._call = call;
  }

  get _rewards(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardsCall__Outputs {
  _call: SetRewardsCall;

  constructor(call: SetRewardsCall) {
    this._call = call;
  }
}

export class SetDepositLimitCall extends ethereum.Call {
  get inputs(): SetDepositLimitCall__Inputs {
    return new SetDepositLimitCall__Inputs(this);
  }

  get outputs(): SetDepositLimitCall__Outputs {
    return new SetDepositLimitCall__Outputs(this);
  }
}

export class SetDepositLimitCall__Inputs {
  _call: SetDepositLimitCall;

  constructor(call: SetDepositLimitCall) {
    this._call = call;
  }

  get _limit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDepositLimitCall__Outputs {
  _call: SetDepositLimitCall;

  constructor(call: SetDepositLimitCall) {
    this._call = call;
  }
}

export class SetPerformanceFeeCall extends ethereum.Call {
  get inputs(): SetPerformanceFeeCall__Inputs {
    return new SetPerformanceFeeCall__Inputs(this);
  }

  get outputs(): SetPerformanceFeeCall__Outputs {
    return new SetPerformanceFeeCall__Outputs(this);
  }
}

export class SetPerformanceFeeCall__Inputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPerformanceFeeCall__Outputs {
  _call: SetPerformanceFeeCall;

  constructor(call: SetPerformanceFeeCall) {
    this._call = call;
  }
}

export class SetManagementFeeCall extends ethereum.Call {
  get inputs(): SetManagementFeeCall__Inputs {
    return new SetManagementFeeCall__Inputs(this);
  }

  get outputs(): SetManagementFeeCall__Outputs {
    return new SetManagementFeeCall__Outputs(this);
  }
}

export class SetManagementFeeCall__Inputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagementFeeCall__Outputs {
  _call: SetManagementFeeCall;

  constructor(call: SetManagementFeeCall) {
    this._call = call;
  }
}

export class SetGuardianCall extends ethereum.Call {
  get inputs(): SetGuardianCall__Inputs {
    return new SetGuardianCall__Inputs(this);
  }

  get outputs(): SetGuardianCall__Outputs {
    return new SetGuardianCall__Outputs(this);
  }
}

export class SetGuardianCall__Inputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }

  get _guardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardianCall__Outputs {
  _call: SetGuardianCall;

  constructor(call: SetGuardianCall) {
    this._call = call;
  }
}

export class SetEmergencyShutdownCall extends ethereum.Call {
  get inputs(): SetEmergencyShutdownCall__Inputs {
    return new SetEmergencyShutdownCall__Inputs(this);
  }

  get outputs(): SetEmergencyShutdownCall__Outputs {
    return new SetEmergencyShutdownCall__Outputs(this);
  }
}

export class SetEmergencyShutdownCall__Inputs {
  _call: SetEmergencyShutdownCall;

  constructor(call: SetEmergencyShutdownCall) {
    this._call = call;
  }

  get _active(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyShutdownCall__Outputs {
  _call: SetEmergencyShutdownCall;

  constructor(call: SetEmergencyShutdownCall) {
    this._call = call;
  }
}

export class SetWithdrawalQueueCall extends ethereum.Call {
  get inputs(): SetWithdrawalQueueCall__Inputs {
    return new SetWithdrawalQueueCall__Inputs(this);
  }

  get outputs(): SetWithdrawalQueueCall__Outputs {
    return new SetWithdrawalQueueCall__Outputs(this);
  }
}

export class SetWithdrawalQueueCall__Inputs {
  _call: SetWithdrawalQueueCall;

  constructor(call: SetWithdrawalQueueCall) {
    this._call = call;
  }

  get _queue(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetWithdrawalQueueCall__Outputs {
  _call: SetWithdrawalQueueCall;

  constructor(call: SetWithdrawalQueueCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Deposit2Call extends ethereum.Call {
  get inputs(): Deposit2Call__Inputs {
    return new Deposit2Call__Inputs(this);
  }

  get outputs(): Deposit2Call__Outputs {
    return new Deposit2Call__Outputs(this);
  }
}

export class Deposit2Call__Inputs {
  _call: Deposit2Call;

  constructor(call: Deposit2Call) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Deposit2Call__Outputs {
  _call: Deposit2Call;

  constructor(call: Deposit2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Withdraw1Call extends ethereum.Call {
  get inputs(): Withdraw1Call__Inputs {
    return new Withdraw1Call__Inputs(this);
  }

  get outputs(): Withdraw1Call__Outputs {
    return new Withdraw1Call__Outputs(this);
  }
}

export class Withdraw1Call__Inputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Withdraw1Call__Outputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Withdraw2Call extends ethereum.Call {
  get inputs(): Withdraw2Call__Inputs {
    return new Withdraw2Call__Inputs(this);
  }

  get outputs(): Withdraw2Call__Outputs {
    return new Withdraw2Call__Outputs(this);
  }
}

export class Withdraw2Call__Inputs {
  _call: Withdraw2Call;

  constructor(call: Withdraw2Call) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Withdraw2Call__Outputs {
  _call: Withdraw2Call;

  constructor(call: Withdraw2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddStrategyCall extends ethereum.Call {
  get inputs(): AddStrategyCall__Inputs {
    return new AddStrategyCall__Inputs(this);
  }

  get outputs(): AddStrategyCall__Outputs {
    return new AddStrategyCall__Outputs(this);
  }
}

export class AddStrategyCall__Inputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rateLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddStrategyCall__Outputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }
}

export class UpdateStrategyDebtLimitCall extends ethereum.Call {
  get inputs(): UpdateStrategyDebtLimitCall__Inputs {
    return new UpdateStrategyDebtLimitCall__Inputs(this);
  }

  get outputs(): UpdateStrategyDebtLimitCall__Outputs {
    return new UpdateStrategyDebtLimitCall__Outputs(this);
  }
}

export class UpdateStrategyDebtLimitCall__Inputs {
  _call: UpdateStrategyDebtLimitCall;

  constructor(call: UpdateStrategyDebtLimitCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _debtLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyDebtLimitCall__Outputs {
  _call: UpdateStrategyDebtLimitCall;

  constructor(call: UpdateStrategyDebtLimitCall) {
    this._call = call;
  }
}

export class UpdateStrategyRateLimitCall extends ethereum.Call {
  get inputs(): UpdateStrategyRateLimitCall__Inputs {
    return new UpdateStrategyRateLimitCall__Inputs(this);
  }

  get outputs(): UpdateStrategyRateLimitCall__Outputs {
    return new UpdateStrategyRateLimitCall__Outputs(this);
  }
}

export class UpdateStrategyRateLimitCall__Inputs {
  _call: UpdateStrategyRateLimitCall;

  constructor(call: UpdateStrategyRateLimitCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rateLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyRateLimitCall__Outputs {
  _call: UpdateStrategyRateLimitCall;

  constructor(call: UpdateStrategyRateLimitCall) {
    this._call = call;
  }
}

export class UpdateStrategyPerformanceFeeCall extends ethereum.Call {
  get inputs(): UpdateStrategyPerformanceFeeCall__Inputs {
    return new UpdateStrategyPerformanceFeeCall__Inputs(this);
  }

  get outputs(): UpdateStrategyPerformanceFeeCall__Outputs {
    return new UpdateStrategyPerformanceFeeCall__Outputs(this);
  }
}

export class UpdateStrategyPerformanceFeeCall__Inputs {
  _call: UpdateStrategyPerformanceFeeCall;

  constructor(call: UpdateStrategyPerformanceFeeCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _performanceFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStrategyPerformanceFeeCall__Outputs {
  _call: UpdateStrategyPerformanceFeeCall;

  constructor(call: UpdateStrategyPerformanceFeeCall) {
    this._call = call;
  }
}

export class MigrateStrategyCall extends ethereum.Call {
  get inputs(): MigrateStrategyCall__Inputs {
    return new MigrateStrategyCall__Inputs(this);
  }

  get outputs(): MigrateStrategyCall__Outputs {
    return new MigrateStrategyCall__Outputs(this);
  }
}

export class MigrateStrategyCall__Inputs {
  _call: MigrateStrategyCall;

  constructor(call: MigrateStrategyCall) {
    this._call = call;
  }

  get _oldVersion(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newVersion(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MigrateStrategyCall__Outputs {
  _call: MigrateStrategyCall;

  constructor(call: MigrateStrategyCall) {
    this._call = call;
  }
}

export class RevokeStrategyCall extends ethereum.Call {
  get inputs(): RevokeStrategyCall__Inputs {
    return new RevokeStrategyCall__Inputs(this);
  }

  get outputs(): RevokeStrategyCall__Outputs {
    return new RevokeStrategyCall__Outputs(this);
  }
}

export class RevokeStrategyCall__Inputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }
}

export class RevokeStrategyCall__Outputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }
}

export class RevokeStrategy1Call extends ethereum.Call {
  get inputs(): RevokeStrategy1Call__Inputs {
    return new RevokeStrategy1Call__Inputs(this);
  }

  get outputs(): RevokeStrategy1Call__Outputs {
    return new RevokeStrategy1Call__Outputs(this);
  }
}

export class RevokeStrategy1Call__Inputs {
  _call: RevokeStrategy1Call;

  constructor(call: RevokeStrategy1Call) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeStrategy1Call__Outputs {
  _call: RevokeStrategy1Call;

  constructor(call: RevokeStrategy1Call) {
    this._call = call;
  }
}

export class AddStrategyToQueueCall extends ethereum.Call {
  get inputs(): AddStrategyToQueueCall__Inputs {
    return new AddStrategyToQueueCall__Inputs(this);
  }

  get outputs(): AddStrategyToQueueCall__Outputs {
    return new AddStrategyToQueueCall__Outputs(this);
  }
}

export class AddStrategyToQueueCall__Inputs {
  _call: AddStrategyToQueueCall;

  constructor(call: AddStrategyToQueueCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStrategyToQueueCall__Outputs {
  _call: AddStrategyToQueueCall;

  constructor(call: AddStrategyToQueueCall) {
    this._call = call;
  }
}

export class RemoveStrategyFromQueueCall extends ethereum.Call {
  get inputs(): RemoveStrategyFromQueueCall__Inputs {
    return new RemoveStrategyFromQueueCall__Inputs(this);
  }

  get outputs(): RemoveStrategyFromQueueCall__Outputs {
    return new RemoveStrategyFromQueueCall__Outputs(this);
  }
}

export class RemoveStrategyFromQueueCall__Inputs {
  _call: RemoveStrategyFromQueueCall;

  constructor(call: RemoveStrategyFromQueueCall) {
    this._call = call;
  }

  get _strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStrategyFromQueueCall__Outputs {
  _call: RemoveStrategyFromQueueCall;

  constructor(call: RemoveStrategyFromQueueCall) {
    this._call = call;
  }
}

export class ReportCall extends ethereum.Call {
  get inputs(): ReportCall__Inputs {
    return new ReportCall__Inputs(this);
  }

  get outputs(): ReportCall__Outputs {
    return new ReportCall__Outputs(this);
  }
}

export class ReportCall__Inputs {
  _call: ReportCall;

  constructor(call: ReportCall) {
    this._call = call;
  }

  get _gain(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _loss(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _debtPayment(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ReportCall__Outputs {
  _call: ReportCall;

  constructor(call: ReportCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }
}

export class Sweep1Call extends ethereum.Call {
  get inputs(): Sweep1Call__Inputs {
    return new Sweep1Call__Inputs(this);
  }

  get outputs(): Sweep1Call__Outputs {
    return new Sweep1Call__Outputs(this);
  }
}

export class Sweep1Call__Inputs {
  _call: Sweep1Call;

  constructor(call: Sweep1Call) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Sweep1Call__Outputs {
  _call: Sweep1Call;

  constructor(call: Sweep1Call) {
    this._call = call;
  }
}
