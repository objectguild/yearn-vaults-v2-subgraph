##### SCHEMA GUIDELINES
## Naming Conventions
# Certain prefixes may be used to indicate a particular type of value.
#   * total - indicates this is a cumulative value (e.g. totalSharesMinted, totalGrossReturns)
#   * balance - indicates this is a spot balance (e.g. balanceTokensInvested, balanceTokensIdle)
#   * delta - indicates this value is the difference between the prior state and the current state (e.g. deltaPricePerShare)
# Use plurals when referring to Tokens or Shares (e.g. totalShares, balanceTokens)

type Transaction @entity {
  "Transaction hash"
  id: ID!
  "The event name / call stacktrace"
  event: String!
  "The transaction sender"
  from: Bytes!
  "Gas price used in the transaction"
  gasPrice: BigInt!
  "Gas sent used in the transaction"
  gasSent: BigInt!
  "Transaction hash"
  hash: Bytes!
  "The transaction index"
  index: BigInt!
  "Address that received the transaction"
  to: Bytes!
  "Ether value sent in the transaction"
  value: BigInt!
  "Timestamp when the transaction was executed"
  timestamp: BigInt!
  "Gas limit used in the transaction"
  gasLimit: BigInt!
  "Block number"
  blockNumber: BigInt!
}

type Token @entity {
  "Token address"
  id: ID!
  "Number of decimals for this Token"
  decimals: Int!
  "Name of the Token"
  name: String!
  "Symbol of the Token"
  symbol: String!
}

enum VaultClassification {
  Endorsed
  Experimental
}

## TODO: Implement tracking the release pipeline from the Registry contract. Add these entities:
# enum VaultStatus {
#   Latest # This Vault is the latest release for a given Token
#   Active # This Vault is not the latest release for a given Token, but is healthy and safe
#   Retired # This Vault has been deprecated and is unwinding/has deposits disabled/should not be used TODO: think this is when the Vault has an emergency shutdown, but check that this doesn't have some status within the registry release pipeline
# }

# type VaultRelease @entity {
#   "Release index in Registry contract"
#   id: ID!
#   "Version string"
#   version: String!
#   "Contract address"
#   contract: Bytes!
#   "Vault deployments of this release version"
#   vaults: [Vault!]! @derivedFrom(field: "release")
#   "Timestamp of Release"
#   timestamp: BigInt!
#   "Block number of Release"
#   blockNumber: BigInt!
#   "Ethereum Transaction"
#   transaction: Transaction!
# }

# TODO:
# emergency shutdown
# withdrawal queue
type Vault @entity {
  "Vault address"
  id: ID!
  "Ethereum Transaction"
  transaction: Transaction!
  "Token this Vault will accrue"
  token: Token!
  "Token representing Shares in the Vault"
  shareToken: Token!
  # "Vault status"
  # status: VaultStatus!
  "Vault classification"
  classification: VaultClassification!
  # "Release Information"
  # release: VaultRelease!
  "Latest Vault Update"
  latestUpdate: VaultUpdate
  "All Vault Updates"
  historicalUpdates: [VaultUpdate!]! @derivedFrom(field: "vault")
  "Strategies for this Vault"
  strategies: [Strategy!]! @derivedFrom(field: "vault")
  "Token deposits into the Vault"
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  "Token withdrawals from the Vault"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "vault")
  "Transfers of Vault Shares"
  transfers: [Transfer!]! @derivedFrom(field: "vault")
  "Tags attached to the Vault"
  tags: [String!]!
  "Balance of Tokens in the Vault and its Strategies"
  balanceTokens: BigInt!
  "Current idle Token balance"
  balanceTokensIdle: BigInt! # Tokens in the Vault contract
  "Balance of Tokens invested into Strategies"
  balanceTokensInvested: BigInt!
  "Deposit limit for Tokens in the Vault"
  tokensDepositLimit: BigInt!
  "Current supply of Shares"
  sharesSupply: BigInt!
  "Management fee in basis points"
  managementFeeBps: Int!
  "Performance fee in basis points"
  performanceFeeBps: Int!

  # TODO: refactor these fields out into vault release entity
  # release fields temporary for MVP
  "Creation timestamp"
  activation: BigInt!
  "The API version."
  apiVersion: String!
}

type VaultUpdate @entity {
  "Vault-Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
  "Vault this update is for"
  vault: Vault!

  ### BALANCES AND SHARES

  "Sum of tokens deposited"
  tokensDeposited: BigInt!
  "Sum of tokens withdrawn"
  tokensWithdrawn: BigInt!
  "Sum of Shares minted over all time"
  sharesMinted: BigInt!
  "Sum of Shares burnt over all time"
  sharesBurnt: BigInt!

  ### PERFORMANCE

  "Current price per full share"
  pricePerShare: BigInt!

  "Returns generated in Tokens"
  returnsGenerated: BigInt!
  "Total fees in Shares" # in this VaultUpdate
  totalFees: BigInt!
  "Management fees in Shares"
  managementFees: BigInt!
  "Performance fees in Shares"
  performanceFees: BigInt!
}

type Account @entity {
  "Account address"
  id: ID!

  "Vault deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Vault withdrawals"
  withdrawals: [Withdrawal!]! @derivedFrom(field: "account")
  "Vault positions"
  vaultPositions: [AccountVaultPosition!]! @derivedFrom(field: "account")

  "Incoming share transfers"
  sharesReceived: [Transfer!]! @derivedFrom(field: "to")
  "Outgoing share transfers"
  sharesSent: [Transfer!]! @derivedFrom(field: "from")
}

type Deposit @entity {
  "Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "Account making Deposit"
  account: Account!
  "Vault deposited into"
  vault: Vault!
  "Number of Tokens deposited into Vault"
  tokenAmount: BigInt!
  "Number of new Vault Shares minted"
  sharesMinted: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
  "Vault Update"
  vaultUpdate: VaultUpdate!
}

type Withdrawal @entity {
  "Transaction-Log"
  id: ID!
  "Timestamp of update"
  timestamp: BigInt!
  "Block number of update"
  blockNumber: BigInt!
  "Account making withdraw"
  account: Account!
  "Vault withdrawn from"
  vault: Vault!
  "Number of Tokens withdrawn from Vault"
  tokenAmount: BigInt!
  "Number of Vault Shares burnt"
  sharesBurnt: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
  "Vault Update"
  vaultUpdate: VaultUpdate!
}

type Transfer @entity {
  "Transaction-Log"
  id: ID!
  "Vault"
  vault: Vault!
  "Sender"
  from: Account!
  "Receiver"
  to: Account!
  "Vault Share Token"
  shareToken: Token!
  "Number of Vault Shares transferred"
  shareAmount: BigInt!
  "Vault Token"
  token: Token!
  "Number of Tokens redeemable for shares transferred"
  tokenAmount: BigInt!
  "Timestamp of Transfer"
  timestamp: BigInt!
  "Block number of Transfer"
  blockNumber: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
}

type AccountVaultPosition @entity {
  "Account-Vault"
  id: ID!
  "Vault"
  vault: Vault!
  "Account"
  account: Account!
  "Vault token"
  token: Token!
  "Vault share token"
  shareToken: Token!
  "Created in transaction"
  transaction: Transaction!
  "Latest account update for this Vault"
  latestUpdate: AccountVaultPositionUpdate!
  "Account updates over time"
  updates: [AccountVaultPositionUpdate!]! @derivedFrom(field: "accountVaultPosition")

  "Share balance"
  balanceShares: BigInt!
  "The current balance of tokens defined as: sum(deposits) - sum(withdrawals) + sum(received transfers) - sum(sent transfers)."
  balanceTokens: BigInt!
  "The current balance position defined as: (vault.balanceOf(account) * (vault.pricePerShare() / 10**vault.decimals()))."
  balancePosition: BigInt!
}

type AccountVaultPositionUpdate @entity {
  "Account-Transaction-Log"
  id: ID!
  "Timestamp"
  timestamp: BigInt!
  "Block number"
  blockNumber: BigInt!
  "Account that owns position update"
  account: Account!
  "The account vault position that this update applies to"
  accountVaultPosition: AccountVaultPosition!
  "Ethereum Transaction"
  transaction: Transaction!

  "Sum of token deposits"
  deposits: BigInt!
  "Sum of token withdrawals"
  withdrawals: BigInt!

  "Sum of share tokens minted"
  sharesMinted: BigInt!
  "Sum of share tokens burnt"
  sharesBurnt: BigInt!

  # "Tokens sent"
  tokensSent: BigInt!
  # "Tokens received"
  tokensReceived: BigInt!
  # "Share tokens sent"
  sharesSent: BigInt!
  # "Share tokens received"
  sharesReceived: BigInt!
  "The balance position."
  balancePosition: BigInt!
  "Vault Update"
  vaultUpdate: VaultUpdate!
}

enum StrategyStatus {
  Active
  Retired
}

type Strategy @entity {
  "Strategy address"
  id: ID!
  "Strategy name."
  name: String!
  "Timestamp the vault information was most recently updated."
  timestamp: BigInt!
  "Blocknumber the vault information was most recently updated."
  blockNumber: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
  "The Strategy address."
  address: Bytes!
  "The Vault"
  vault: Vault!
  "Defines the maximum borrow amount."
  debtLimit: BigInt!
  "It is the current rate limit. It increases/decreases per block."
  rateLimit: BigInt!
  "Defines the strategist's fee (basis points)."
  performanceFeeBps: Int!
  "The latest report for this Strategy"
  latestReport: StrategyReport
  "The reports created by this strategy."
  reports: [StrategyReport!]! @derivedFrom(field: "strategy")
  "harvest() calls"
  harvests: [Harvest!]! @derivedFrom(field: "strategy")
}

type StrategyReport @entity {
  "The Strategy Report ID."
  id: ID!
  "Timestamp the strategy report was most recently updated."
  timestamp: BigInt!
  "Blocknumber the strategy report was most recently updated."
  blockNumber: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
  "The Strategy reference."
  strategy: Strategy!
  "The reported gain amount for the strategy."
  gain: BigInt!
  "The reported loss amount for the strategy."
  loss: BigInt!
  "The reported total gain amount for the strategy."
  totalGain: BigInt!
  "The reported total loss amount for the strategy."
  totalLoss: BigInt!
  "The reported total debt amount for the strategy."
  totalDebt: BigInt!
  "The reported debt added amount for the strategy."
  debtAdded: BigInt!
  "The reported debt limit amount for the strategy."
  debtLimit: BigInt!
  # "Vault state"
  # vaultUpdate: VaultUpdate!

  #### TODO Awaiting updated Vault Yield-Oracles https://github.com/iearn-finance/yearn-vaults/pull/69
  # "12-day EMA of Vault APY as reported by built-in Yield Oracle"
  # apy12dEMA: Int!
  # "50-day EMA of Vault APY as reported by built-in Yield Oracle"
  # apy50dEMA: Int!
}

type Harvest @entity {
  "Strategy-Transaction-Log"
  id: ID!
  "Timestamp the strategy report was most recently updated."
  timestamp: BigInt!
  "Blocknumber the strategy report was most recently updated."
  blockNumber: BigInt!
  "Ethereum Transaction"
  transaction: Transaction!
  "Vault that owns the strategy"
  vault: Vault!
  "Strategy that harvested"
  strategy: Strategy!
  "Function caller"
  harvester: Bytes!

  "The reported profit amount for the strategy at the time of the harvest."
  profit: BigInt!
  "The reported loss amount for the strategy at the time of the harvest."
  loss: BigInt!
  "The reported debt paid from strategy at the time of the harvest."
  debtPayment: BigInt!
  "The reported outstanding debt from strategy at the time of the harvest."
  debtOutstanding: BigInt!
}
